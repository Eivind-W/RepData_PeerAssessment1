x <- 4L
class(x)
x <- c(4,TRUE)
class(x)
x
x <- c(1,3,5)
y <- c(3,2,10)
cbind(x,y)
x <- list(2,"a","b",TRUE)
x[[2]]
x <- 1:4
y <- 2:3
x+y
x
y
x <- c(17,14,4,5,13,12,10)
x[x > 10]
x[x > 10] <- 4
x
read.csv C:\Users\eloev\Documents\R
read.csv(C:\Users\eloev\Documents\R\hw1_data.csv)
read.csv("C:\Users\eloev\Documents\R\hw1_data.csv")
read.table("C:\Users\eloev\Documents\R\hw1_data.csv")
read.table(C:\Users\eloev\Documents\R\hw1_data.csv)
hw1_data <- read.csv("~/R/hw1_data.csv")
View(hw1_data)
hwl1_data[[1,2]]
hw1_data[[1,2]]
hw1_data[[Ozone]]
hw1_data[["Ozone"]]
goodcases <- complete.cases(hw1_data)
goodcases[["Ozone" = TRUE]]
goodcases
OzoneVals <- hw1_data["Ozone"]
OzoneChk <- is.na(OzoneVals)
OzoneVals[!OzoneChk]
153-113
View(hw1_data)
View(OzoneChk)
OzoneVals[!OzoneChk]
OzoneTrue <- OzoneVals[!OzoneChk]
153-116
mean(OzoneTrue)
Q18Data <- hw1_data["Ozone">31]
View(Q18Data)
Q18Data <- hw1_data[[>31]][[>90]]
names(hw1_data)
Q18Data <- subset(hw1_data,"Ozone">31,"Solar.R">90)
View(Q18Data)
Q18Data <- subset(hw1_data,Ozone>31,Solar.R>90)
Q18Data <- subset(hw1_data,Ozone>31 & Solar.R>90)
Solar <- Q18Data[Solar.R]
Solar <- Q18Data["Solar.R"]
mean(Q18Data["Solar.R"])
Solar
mean(Solar)
View(Solar)
View(Solar[1])
mean(Solar[1])
mean(Solar[[Solar.R]])
Solar[[Solar.R]]
Solar[Solar.R]
Q18Data
mean(Q18Data[["Solar.R"]])
View(Q18Data)
View(Q18Data)
Q18Data <- subset(hw1_data,Ozone>31 & Temp>90)
mean(Q18Data[["Solar.R"]])
Q19Data <- subset(hw1_data,Month==6)
mean(Q19Data[["Temp"]])
max(subset(hw1_data,Month==6)[["Ozone"]])
Q20Data <- subset(hw1_data,Month==5)
max(Q20Data[["Ozone"]])
view(Q20Data)
View(Q20Data)
Q20Data <- subset(Q20Data,Ozone <> NA)
Q20Data_b <- subset(Q20Data,!is.na(Ozone))
View(Q20Data_b)
View(Q20Data_b)
max(Q20Data_2[["Ozone"]])
max(Q20Data_b[["Ozone"]])
library(datasets)
data(iris)
?iris
iris
View(iris)
?tapply
tapply(iris["Sepal.Length"],iris["Species"],mean)
sepal.length <- iris["Sepal.Lenght"]
iris_data <- iris
sepal.length <- iris_data["Sepal.Length"]
View(sepal.length)
species <- iris_data["Species"]
tapply(sepal.length,species,mean)
tapply(sepal.length,species,fun=mean)
split(sepal.length,species)
lengthperspecies <- split(sepal.length,species)
sapply(lengthperspecies,mean)
?sapply
tapply(sepal.length,species,fun=mean)
library(datasets)
data("iris")
dataset <- iris
?tapply
mean_vals <- tapply(dataset$Sepal.Length,dataset$Species,mean)
mean_vals
apply(iris[,1:4],2,mean)
library(datasets)
data("mtcars")
?mtcars
with(mtcars,tapply(mpg,cyl,mean))
?with
?mtcars
with(mtcars,tapply(hp,cyl,mean))
mean.hp <- with(mtcars,tapply(hp,cyl,mean))
mean.hp$8 - mean.hp$4
mean.hp["8"] - mean.hp["4"]
209-82
debug(ls)
?ls
?debug
0
source('~/R/ProgrammingAssignment2/cachematrix.R')
?matrix
A <- matrix(c(4,3,3,2),nrow=2,ncol=2)
View(A)
Inverse <- solve(A)
view(Inverse)
View(Inverse)
cacheSolve(A)
traceback()
source('~/R/ProgrammingAssignment2/cachematrix.R')
x <- makeCacheMatrix(A)
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)
x
x$getinverse()
m <- x$getinverse()
!is.null(m)
x$get()
data <- x$get()
source('~/R/ProgrammingAssignment2/cachematrix.R')
x <- makeCacheMatrix(A)
x
A
A_inv <- CacheSolve(x)
A_inv <- cacheSolve(x)
A_inv <- cacheSolve(x)
source('~/R/ProgrammingAssignment2/cachematrix.R')
B <- matrix(c(1,-1,3,2,1,2,-2,-2,1),nrows=3,ncols=3)
B <- matrix(c(1,-1,3,2,1,2,-2,-2,1),nrow=3,ncol=3)
B
x2 <- makeCacheMatrix(B)
cacheSolve(x2)
cacheSolve(x2)
source('~/R/ProgrammingAssignment2/cachematrix.R')
source('~/R/ProgrammingAssignment2/cachematrix.R')
set.seed(1)
rpois(5,2)
?rnorm
?rpois
set.seed(10)
x <- rep(0:1,each=5)
e <- rnorm(10,0,20)
y <- 0.5 + 2 * x + e
plot(x,y)
?rbinom
?qpois
?rnorm
## function creates a matrix
makeCacheMatrix <- function(x = matrix()) {
set <- function(y) {
x <<- y
}
get <- solve() x
list(get = get)
}
## this function then caches its inverse with the solve function.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$get()
if(!is.null(m)) {
message("getting cached data")
return(solve(m))
}
m <- x$get()
return(solve(m))
}
source('~/.active-rstudio-document')
?return
library(xlsx)
library(xlsx)
library(xlsx)
install.packages("xlsx")
library(xlsx)
install.packages("rJava")
library(xlsx)
library(rJava)
url <- "https://s3.amazonaws.com/coursera-uploads/user-d2cf5ec23cec2551a0a3cafe/975117/asst-3/34241e407b5f11e59dfeab4ed053c970.txt"
read.csv(url,header=TRUE,sep=" ")
dataset1 <- read.csv(url,header=TRUE,sep=" ")
View(dataset1)
url <- "https://s3.amazonaws.com/coursera-uploads/user-d901d23cef0452f35f5545ae/975117/asst-3/b4c5c3b07b5e11e58b466ff3e74c4acb.txt"
dataset1 <- read.csv(url,header=TRUE,sep=" ")
dataset1 <- read.delim(url)
View(dataset1)
url <- "https://s3.amazonaws.com/coursera-uploads/user-d901d23cef0452f35f5545ae/975117/asst-3/b4c5c3b07b5e11e58b466ff3e74c4acb.txt"
dataset2 <- read.csv(url,header=TRUE,sep=" ")
View(dataset2)
dataset2 <- read.delim(url)
url2 <- "https://github.com/yurayli/CleanData/blob/master/avgData.txt?raw=true"
dataset2b <- read.delim(url2)
head(dataset2b)
?names
names(dataset2)
url3 <- "https://s3.amazonaws.com/coursera-uploads/user-e756da51daacd65b2c7eef15/975117/asst-3/2eab00a07b5a11e580cac53d929b103e.txt"
dataset3 <- read.csv(url3)
View(dataset3)
dataset3 <- read.csv(url3,sep=" ")
names(dataset3)
url4 <- "https://s3.amazonaws.com/coursera-uploads/user-5d0b7e6c50d26b192a7d29dc/975117/asst-3/abab35007b5c11e598a3cf505b3b94da.txt"
dataset4 <- read.csv(url4,sep=" ")
View(dataset4)
source('~/R/convert_seb.R')
convert_seb("C:\\Users\\eloev\\Downloads\\Transliste (1).csv","C:\\Users\\eloev\\Downloads\\SEB.csv")
convert_seb("C:\\Users\\eloev\\Downloads\\transaksjoner.csv","C:\\Users\\eloev\\Downloads\\SEB.csv")
convert_seb("C:\\Users\\eloev\\Downloads\\transaksjoner (1).csv","C:\\Users\\eloev\\Downloads\\SEB.csv")
source('~/R/convert_eurocard.R')
convert_eurocard("C:\\Users\\eloev\\Downloads\\Ufakturert MittEurocard (2).xls","C:\\Users\\eloev\\Downloads\\EC.csv")
convert_eurocard("C:\\Users\\eloev\\Downloads\\Transaksjoner Mitt Kort.xls","C:\\Users\\eloev\\Downloads\\DC.csv")
setwd("~/R/ReproducibleResearch/Project 1")
setwd("~/R/ReproducibleResearch/RepData_PeerAssessment1")
?unzip
setwd("~/R/ReproducibleResearch/RepData_PeerAssessment1")
unzip("activity.zip")
activity <- read.csv("activity.csv")
View(activity)
?read.csv
activity <- read.csv("activity.csv",na.strings = "NA")
?as.Date
activity$date <- as.Date(activity$date)
?lapply
?sapply
?tapply
?apply
?dplyr
load(dplyr)
source(dplyr)
library(dplyr)
?summarise
summary <- summarise(group_by(activity,date),sum(steps))
View(summary)
View(summary)
steps.daily <- summarise(group_by(activity,date),sum(steps))
steps.mean <- mean(steps.daily$`sum(steps)`)
?mean
steps.mean <- mean(steps.daily$`sum(steps)`,na.rm = TRUE)
?median
steps.intervals <- summarise(group_by(activity,interval),mean(steps,na.rm=TRUE))
View(steps.intervals)
2355/60
?geom_line
library(ggplot2)
?geom_line
ggplot(data=steps.intervals,aes(x=steps.intervals$interval,
y=steps.intervals$`mean(steps)`)) +
geom_line(colour="blue") +
ylab("Mean number of steps") +
xlab("Time of day (in five minute intervals") +
ggtitle("Mean number of steps by the time of day")
View(steps.intervals)
steps.intervals <- summarise(group_by(activity,interval),mean(steps))
ggplot(data=steps.intervals,aes(x=steps.intervals$interval,
y=steps.intervals$`mean(steps)`)) +
geom_line(colour="blue") +
ylab("Mean number of steps") +
xlab("Time of day (in five minute intervals") +
ggtitle("Mean number of steps by the time of day")
View(steps.intervals)
steps.intervals <- summarise(group_by(activity,interval),mean(steps))
View(steps.intervals)
?summarise
steps.intervals <- summarise(group_by(activity,interval),steps = mean(steps,na.rm =TRUE))
steps.intervals <- summarise(group_by(activity,interval),steps = mean(steps,na.rm =TRUE))
ggplot(data=steps.intervals,aes(x=steps.intervals$interval,
y=steps.intervals$`mean(steps)`)) +
geom_line(colour="blue") +
ylab("Mean number of steps") +
xlab("Time of day (in five minute intervals") +
ggtitle("Mean number of steps by the time of day")
ggplot(data=steps.intervals,aes(x=steps.intervals$interval,
y=steps.intervals$steps)) +
geom_line(colour="blue") +
ylab("Mean number of steps") +
xlab("Time of day (in five minute intervals") +
ggtitle("Mean number of steps by the time of day")
?str_pad
library(stringr)
?str_pad
activity$interval.label <- str_pad(as.character(activity$interval),width=4,side="right",pad="0")
View(activity)
activity$interval.label <- str_pad(as.character(activity$interval),width=4,side="left",pad="0")
View(activity)
?strsplit
?paste
activity$interval.label <- paste(substr(activity$interval.label,1,2),
substr(activity$interval.label,3,4),
sep=":")
View(steps.intervals)
max(steps.intervals$steps)
steps.intervals[max(steps.intervals$steps),]
steps.intervals[,max(steps.intervals$steps)]
steps.intervals[max(steps.intervals$steps),]
steps.intervals[steps.intervals$steps == max(steps.intervals$steps),]
?is.na
?count
?n
n(activity$steps)
count(activity$steps)
nrow(activity$steps)
nrows(activity$steps)
nrows(activity)
nrow(activity)
